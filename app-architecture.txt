Client

React Components:
- App 
  * keeps state of whether user is logged in and shows either Login or the chatroom components
  - Login
    * action for adding a user
  - UserList
    * action for getting all logged in users
  - MessageList
    * action for getting all messages
    - Message
      - text
      - user
      - time
  - AddMessage(Container)
  * action for adding a message


Redux:
- Action Creators(functions that return actions)
  - authLogin
  - authLogout(leaving page)
  - addMessage
  - getAllUsers
    - GET request to '/users' to return json of users

- Constants

- Middleware
  - handle socket.io connection
    - listen for socket.io events and dispatch actions based on them(not sure about this approach) Could also just handle socket.io events in actions
      - new message
      - new user
      - user logout
  - thunk
    - handle async server requests that return a promise


- Reducers
  - messages
    - ADD_MESSAGE
    - RECEIVED_MESSAGE
  - auth
    - ADD_USER
    - REMOVE_USER

- Store
  - State
    - users
      - username
      - id(socket.io id)
      - status(active or inactive)
    - messages
      - content
      - user(username)
      - time
      - id(uuid) * might not be needed


Styling
- Semantic UI React
  - avatars for users


Extra
- validate prop types

- Solutions to check if a link is valid:
https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url
- https://developer.mozilla.org/en-US/docs/Web/API/URL

- Package to extract metadata from url:
https://npm.runkit.com/url-metadata

https://socket.io/docs/emit-cheatsheet/



Server
- keep track of users and messages in arrays
  - array of objects
    - user: username, socket id
    - message: content, user, time
- users:
  - GET route for '/users' to get all users
  - POST route for '/users' to add a user
    - check if user already exists 
- when a user logs out(disconnects) 
  - DELETE route for '/users/:socketID'
  - remove them from logged in users
    - can get unique id from socket.id
  - emit the logged out user id to remove user for 
- messages:
  - GET route for '/messages' to get all current messages
  - POST route for '/messages' to add a message

- when a message is received emit the message
